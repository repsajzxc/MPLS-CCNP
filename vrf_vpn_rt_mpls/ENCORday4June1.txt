########################################################
Lab:  mpls vpn vrf:

d1 2006
d2 2007
r4 2009
r3 2010
r2 2011
r1 2012
i1 2014
i2 2015


Task1: master VRF:

There are three routers. I have also three VRFs:

MGT – used for management, has RD 1:1
ABCBPI – has RD 2:2
DEFPNB – has RD 3:3


0 – global table
1 – VRF MGT
2 and 22 – VRF ABC
3 and 33 – VRF DEF

@@R1:
config t
ip cef
hostname R1
!
ip vrf ABCBPI
 rd 2:2
 route-target export 2:2
 route-target import 2:2
!
ip vrf DEFPNB
 rd 3:3
 route-target export 3:3
 route-target import 3:3
!
ip vrf MGT
 rd 1:1
 route-target export 1:1
 route-target import 1:1
!
interface Loopback0
 ip address 10.1.0.1 255.255.255.255
!
interface Loopback1
 ip vrf forwarding MGT
 ip address 10.1.1.1 255.255.255.255
!
interface Loopback2
 ip vrf forwarding ABCBPI
 ip address 10.1.2.1 255.255.255.255
!
interface Loopback3
 ip vrf forwarding DEFPNB
 ip address 10.1.3.1 255.255.255.255
!
interface Loopback22
 ip vrf forwarding ABCBPI
 ip address 10.1.22.1 255.255.255.255
!         
interface Loopback33
 ip vrf forwarding DEFPNB
 ip address 10.1.33.1 255.255.255.255
!
interface Ethernet1/0
 ip address 192.168.12.1 255.255.255.0
 mpls ip
!
no router ospf 1
router ospf 1
 network 10.1.0.1 0.0.0.0 area 0
 network 192.168.12.1 0.0.0.0 area 0
!
router bgp 1
 no synchronization
 bgp log-neighbor-changes
 neighbor 10.2.0.1 remote-as 1
 neighbor 10.2.0.1 update-source Loopback0
 no auto-summary
 !
 address-family vpnv4
  neighbor 10.2.0.1 activate
  neighbor 10.2.0.1 send-community both
 exit-address-family
 !
 address-family ipv4 vrf ABCBPI
  no synchronization
  network 10.1.2.1 mask 255.255.255.255
  network 10.1.22.1 mask 255.255.255.255
 exit-address-family
 !
 address-family ipv4 vrf DEFPNB
  no synchronization
  network 10.1.3.1 mask 255.255.255.255
  network 10.1.33.1 mask 255.255.255.255
 exit-address-family
 !
 address-family ipv4 vrf MGT
  no synchronization
  network 10.1.1.1 mask 255.255.255.255
 exit-address-family
 end
 
@@R2:
config t
ip cef
hostname R2
!
ip vrf ABCBPI
 rd 2:2
 route-target export 2:2
 route-target import 2:2
!
ip vrf DEFBPI
 rd 3:3
 route-target export 3:3
 route-target import 3:3
!
ip vrf MGT
 rd 1:1
 route-target export 1:1
 route-target import 1:1
!
interface Loopback0
 ip address 10.2.0.1 255.255.255.255
!
interface Loopback1
 ip vrf forwarding MGT
 ip address 10.2.1.1 255.255.255.255
!
interface Ethernet1/2
 ip address 192.168.12.2 255.255.255.0
 mpls ip
!
interface Ethernet1/1
 ip address 192.168.23.2 255.255.255.0
 mpls ip
!
no router ospf 1
router ospf 1
 network 10.2.0.1 0.0.0.0 area 0
 network 192.168.12.2 0.0.0.0 area 0
 network 192.168.23.2 0.0.0.0 area 0
!
router bgp 1
 no synchronization
 bgp log-neighbor-changes
 neighbor 10.1.0.1 remote-as 1
 neighbor 10.1.0.1 update-source Loopback0
 neighbor 10.3.0.1 remote-as 1
 neighbor 10.3.0.1 update-source Loopback0
 no auto-summary
 !
 address-family vpnv4
  neighbor 10.1.0.1 activate
  neighbor 10.1.0.1 send-community both
  neighbor 10.1.0.1 route-reflector-client
  neighbor 10.3.0.1 activate
  neighbor 10.3.0.1 send-community both
  neighbor 10.3.0.1 route-reflector-client
 exit-address-family
 !
 address-family ipv4 vrf MGT
  no synchronization
  network 10.2.1.1 mask 255.255.255.255
 exit-address-family
 end
 
@@@@@@@@@@@@@@@@ 
@@R3:
config t
ip cef
hostname R3
!
ip vrf ABCBPI
 rd 2:2
 route-target export 2:2
 route-target import 2:2
!
ip vrf DEFPNB
 rd 3:3
 route-target export 3:3
 route-target import 3:3
!
ip vrf MGT
 rd 1:1
 route-target export 1:1
 route-target import 1:1
!
interface Loopback0
 ip address 10.3.0.1 255.255.255.255
!
interface Loopback1
 ip vrf forwarding MGT
 ip address 10.3.1.1 255.255.255.255
!
interface Loopback2
 ip vrf forwarding ABCBPI
 ip address 10.3.2.1 255.255.255.255
!
interface Loopback3
 ip vrf forwarding DEFPNB
 ip address 10.3.3.1 255.255.255.255
!
interface Loopback22
 ip vrf forwarding ABCBPI
 ip address 10.3.22.1 255.255.255.255
!         
interface Loopback33
 ip vrf forwarding DEFPNB
 ip address 10.3.33.1 255.255.255.255
!
interface Ethernet1/1
 ip address 192.168.23.3 255.255.255.0
 mpls ip
!
no router ospf 1
router ospf 1
 network 10.3.0.1 0.0.0.0 area 0
 network 192.168.23.3 0.0.0.0 area 0
!
no router bgp 1
router bgp 1
 no synchronization
 bgp log-neighbor-changes
 neighbor 10.2.0.1 remote-as 1
 neighbor 10.2.0.1 update-source Loopback0
 no auto-summary
 !
 address-family vpnv4
  neighbor 10.2.0.1 activate
  neighbor 10.2.0.1 send-community both
 exit-address-family
 !
 address-family ipv4 vrf ABCBPI
  no synchronization
  network 10.3.2.1 mask 255.255.255.255
  network 10.3.22.1 mask 255.255.255.255
 exit-address-family
 !
 address-family ipv4 vrf DEFPNB
  no synchronization
  network 10.3.3.1 mask 255.255.255.255
  network 10.3.33.1 mask 255.255.255.255
 exit-address-family
 !
 address-family ipv4 vrf MGT
  no synchronization
  network 10.3.1.1 mask 255.255.255.255
 exit-address-family
 end
 
Task1: ETO SILA R1,R2,R3 PAG WALA PA GINAWA:

R1#show ip route ospf

      10.0.0.0/32 is subnetted, 7 subnets
O        10.2.0.1 [110/11] via 192.168.12.2, 00:00:09, Ethernet1/0
O        10.3.0.1 [110/21] via 192.168.12.2, 00:00:09, Ethernet1/0
O     192.168.23.0/24 [110/20] via 192.168.12.2, 00:00:09, Ethernet1/0


R1#sh ip ro vrf MGT
      10.0.0.0/32 is subnetted, 2 subnets
B        10.2.1.1 [200/0] via 10.2.0.1, 00:01:35
B        10.3.1.1 [200/0] via 10.3.0.1, 00:01:35


R1#sh ip ro vrf ABC

      10.0.0.0/32 is subnetted, 2 subnets
B        10.3.2.1 [200/0] via 10.3.0.1, 00:19:06
B        10.3.22.1 [200/0] via 10.3.0.1, 00:19:06

R1#sh ip route vrf DEF | inc B
Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
B        10.3.3.1 [200/0] via 10.3.0.1, 00:03:21
B        10.3.33.1 [200/0] via 10.3.0.1, 00:03:21
R1#


R1#sh ip bgp vpnv4 all sum 
BGP router identifier 10.1.33.1, local AS number 1
BGP table version is 13, main routing table version 13
6 network entries using 912 bytes of memory
6 path entries using 456 bytes of memory
3/3 BGP path/bestpath attribute entries using 444 bytes of memory
1 BGP rrinfo entries using 24 bytes of memory
3 BGP extended community entries using 72 bytes of memory
0 BGP route-map cache entries using 0 bytes of memory
0 BGP filter-list cache entries using 0 bytes of memory
BGP using 1908 total bytes of memory
BGP activity 6/0 prefixes, 6/0 paths, scan interval 60 secs

Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.2.0.1        4            1      30      26       13    0    0 00:19:53        6
R1#

R1#sh ip bg vpnv4 vrf MGT
BGP table version is 13, local router ID is 10.1.33.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal, 
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, 
              x best-external, a additional-path, c RIB-compressed, 
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

Route Distinguisher: 1:1 (default for vrf MGT)
 *>  10.1.1.1/32      0.0.0.0                  0         32768 i
 *>i 10.2.1.1/32      10.2.0.1                 0    100      0 i
 *>i 10.3.1.1/32      10.3.0.1                 0    100      0 i
 
R1#sh ip bg vpnv4 vrf ABC
BGP table version is 13, local router ID is 10.1.33.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal, 
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, 
              x best-external, a additional-path, c RIB-compressed, 
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

     Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher: 2:2 (default for vrf ABC)
 *>  10.1.2.1/32      0.0.0.0                  0         32768 i
 *>  10.1.22.1/32     0.0.0.0                  0         32768 i
 *>i 10.3.2.1/32      10.3.0.1                 0    100      0 i
 *>i 10.3.22.1/32     10.3.0.1                 0    100      0 i
 
R1#sh ip bg vpnv4 vrf DEF
R1#sh ip bg vpnv4 vrf DEF
BGP table version is 13, local router ID is 10.1.33.1
Status codes: s suppressed, d damped, h history, * valid, > best, i - internal, 
              r RIB-failure, S Stale, m multipath, b backup-path, f RT-Filter, 
              x best-external, a additional-path, c RIB-compressed, 
Origin codes: i - IGP, e - EGP, ? - incomplete
RPKI validation codes: V valid, I invalid, N Not found

     Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher: 3:3 (default for vrf DEF)
 *>  10.1.3.1/32      0.0.0.0                  0         32768 i
 *>  10.1.33.1/32     0.0.0.0                  0         32768 i
 *>i 10.3.3.1/32      10.3.0.1                 0    100      0 i
 *>i 10.3.33.1/32     10.3.0.1                 0    100      0 i
 
 
R3#sh ip ro vrf ABC

      10.0.0.0/32 is subnetted, 4 subnets
B        10.1.2.1 [200/0] via 10.1.0.1, 00:02:37
B        10.1.22.1 [200/0] via 10.1.0.1, 00:02:37
C        10.3.2.1 is directly connected, Loopback2
C        10.3.22.1 is directly connected, Loopback22

sh ip ro vrf DEF
      10.0.0.0/32 is subnetted, 4 subnets
B        10.1.3.1 [200/0] via 10.1.0.1, 00:03:19
B        10.1.33.1 [200/0] via 10.1.0.1, 00:03:19
C        10.3.3.1 is directly connected, Loopback3
C        10.3.33.1 is directly connected, Loopback33

R1#sh ip bg vpnv4 vrf MGT

Route Distinguisher: 1:1 (default for vrf MGT)
 *>  10.1.1.1/32      0.0.0.0                  0         32768 i
 *>i 10.2.1.1/32      10.2.0.1                 0    100      0 i
 *>i 10.3.1.1/32      10.3.0.1                 0    100      0 i
 
R1#sh ip bg vpnv4 vrf ABC

     Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher: 2:2 (default for vrf ABC)
 *>  10.1.2.1/32      0.0.0.0                  0         32768 i
 *>  10.1.22.1/32     0.0.0.0                  0         32768 i
 *>i 10.3.2.1/32      10.3.0.1                 0    100      0 i
 *>i 10.3.22.1/32     10.3.0.1                 0    100      0 i
 

R1#sh ip bg vpnv4 vrf DEF

     Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher: 3:3 (default for vrf DEF)
 *>  10.1.3.1/32      0.0.0.0                  0         32768 i
 *>  10.1.33.1/32     0.0.0.0                  0         32768 i
 *>i 10.3.3.1/32      10.3.0.1                 0    100      0 i
 *>i 10.3.33.1/32     10.3.0.1                 0    100      0 i
 
TASK2: LETS GET TO WORK.
r1:
show ip route vrf ABC
B        10.3.2.1 [200/0] via 10.3.0.1, 00:07:47
B        10.3.22.1 [200/0] via 10.3.0.1, 00:07:47
config t
ip vrf ABCBPI
 route-target import 3:3
 do clear ip bgp *
end

R1#show ip route vrf ABC
B        10.1.3.1 is directly connected (DEF), 00:00:06, Loopback3
C        10.1.22.1 is directly connected, Loopback22
B        10.1.33.1 is directly connected (DEF), 00:00:06, Loopback33
B        10.3.2.1 [200/0] via 10.3.0.1, 00:00:06
B        10.3.3.1 [200/0] via 10.3.0.1, 00:00:06
B        10.3.22.1 [200/0] via 10.3.0.1, 00:00:06
B        10.3.33.1 [200/0] via 10.3.0.1, 00:00:06

But, DEF is still the same:

R1#show ip route vrf DEF
C        10.1.33.1 is directly connected, Loopback33
B        10.3.3.1 [200/0] via 10.3.0.1, 00:04:05
B        10.3.33.1 [200/0] via 10.3.0.1, 00:04:05

R1#ping vrf ABC 10.3.2.1 
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.3.2.1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/1/1 ms
R1#ping vrf ABC 10.3.22.1
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.3.22.1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/1/2 ms
R1#ping vrf ABC 10.3.3.1 
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.3.3.1, timeout is 2 seconds:
..... 
Success rate is 0 percent (0/5)
R1#ping vrf ABC 10.1.3.1
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.1.3.1, timeout is 2 seconds:
.....
Success rate is 0 percent (0/5)

Task3: Ipasok mga ABC sa DEF:
R1:
R1#show ip route vrf DEF
B        10.3.3.1 [200/0] via 10.3.0.1, 00:17:36
B        10.3.33.1 [200/0] via 10.3.0.1, 00:17:36
config t
ip vrf DEFPNB
 route-target import 2:2
 do clear ip bgp * soft
 do sr vrf DEFPNB bgp
      10.0.0.0/32 is subnetted, 8 subnets
B        10.1.2.1 is directly connected (ABC), 00:01:31, Loopback2
B        10.1.22.1 is directly connected (ABC), 00:01:31, Loopback22
B        10.3.2.1 [200/0] via 10.3.0.1, 00:01:31
B        10.3.3.1 [200/0] via 10.3.0.1, 00:01:31
B        10.3.22.1 [200/0] via 10.3.0.1, 00:01:31
B        10.3.33.1 [200/0] via 10.3.0.1, 00:01:31 

Task4: lets attack R3:
r3:
R3#sr vrf ABC bgp
B        10.1.2.1 [200/0] via 10.1.0.1, 00:06:14
B        10.1.22.1 [200/0] via 10.1.0.1, 00:06:14
R3#sr vrf DEF bgp

      10.0.0.0/32 is subnetted, 4 subnets
B        10.1.3.1 [200/0] via 10.1.0.1, 00:06:40
B        10.1.33.1 [200/0] via 10.1.0.1, 00:06:40
config t
ip vrf ABC
 route-target import 3:3
 do clear ip bgp *
 do sr vrf ABC bgp
B        10.1.2.1 [200/0] via 10.1.0.1, 00:00:57
B        10.1.3.1 [200/0] via 10.1.0.1, 00:00:57
B        10.1.22.1 [200/0] via 10.1.0.1, 00:00:57
B        10.1.33.1 [200/0] via 10.1.0.1, 00:00:57
B        10.3.3.1 is directly connected (DEF), 00:00:57, Loopback3
B        10.3.33.1 is directly connected (DEF), 00:00:57, Loopback33

R3:
config t
ip vrf DEF
 route-target import 2:2
 do clear ip bgp *
 do sr vrf DEF bgp
B        10.1.2.1 [200/0] via 10.1.0.1, 00:00:06
B        10.1.3.1 [200/0] via 10.1.0.1, 00:00:06
B        10.1.22.1 [200/0] via 10.1.0.1, 00:00:06
B        10.1.33.1 [200/0] via 10.1.0.1, 00:00:06
B        10.3.2.1 is directly connected (ABC), 00:00:06, Loopback2
B        10.3.22.1 is directly connected (ABC), 00:00:06, Loopback22

TASK5: OTHER WAYS, TO IMPORT:  
FOR R1, WE WILL IMPORT ONLY 10.3.33.0/24 AND not 10.3.3.0/24

r1:
config t
ip vrf ABC
 route-target import 3:3
 import map ABC-IMPORT-MAP
!
ip extcommunity-list standard EC_ABC permit rt 2:2
ip extcommunity-list standard EC_DEF permit rt 3:3
!
ip prefix-list IMPORT_TO_ABC_FROM_DEF seq 10 permit 10.3.33.0/24 le 32
!
route-map ABC-IMPORT-MAP permit 10
 match extcommunity EC_ABC
!
route-map ABC-IMPORT-MAP permit 20
 match ip address prefix-list IMPORT_TO_ABC_FROM_DEF
 match extcommunity EC_DEF
 exit
 do clear ip bgp *

R1(config)#do sr vrf ABC bgp
      10.0.0.0/32 is subnetted, 5 subnets
B        10.3.2.1 [200/0] via 10.3.0.1, 00:00:03
B        10.3.22.1 [200/0] via 10.3.0.1, 00:00:03
B        10.3.33.1 [200/0] via 10.3.0.1, 00:00:03


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

MPLS supah lab:

R4-PEa:
configure terminal
 hostname R4-PEa
 enable secret pass
 no ip domain-lookup
 logging console
 alias exec bp show ip int brief | ex una
 alias exec sr show ip route
 alias exec sp show ip protocols
 ip subnet-zero
 int lo 0
   ip address 172.16.1.4 255.255.255.255
end

***

R3-Pcore:
enable
configure terminal
 hostname R3-PCoreA
 enable secret pass
 no ip domain-lookup
 logging console
 ip subnet-zero
 int lo 0
   ip address 172.16.1.3 255.255.255.255
   no shut
end

***

R2:
enable
configure terminal
 hostname R2-PCoreB
 enable secret pass
 no ip domain-lookup
 logging console
 ip subnet-zero
 int lo 0
   ip address 172.16.1.2 255.255.255.255
   no shut
end


****

R1PEz:
enable
configure terminal
 hostname R1-PEz
 enable secret pass
 no ip domain-lookup
 logging console
 ip subnet-zero
 int lo 0
   ip address 172.16.1.1 255.255.255.255
   no shut
end

**********

***

D1-pnbA:
enable
configure terminal
 hostname D1-PNBa
 enable secret pass
 no ip domain-lookup
 logging console
 alias exec bp show ip int brief | ex una
 alias exec sr show ip route
 alias exec sp show ip protocols
 ip subnet-zero
 int Ethernet1/1
   ip address 10.1.1.1 255.255.255.252
   no shut

***

***

isp1-pnbB:
enable
configure terminal
 hostname PNBb
 enable secret pass
 no ip domain-lookup
 logging console
 alias exec bp show ip int brief | ex una
 alias exec sr show ip route
 alias exec sp show ip protocols
 ip subnet-zero
 int Eth 1/3
   ip address 10.1.1.5 255.255.255.252
   no shut

***

D2-BPIa:
enable
configure terminal
 hostname D2-BPIa
 enable secret pass
 no ip domain-lookup
 logging console
 ip subnet-zero
 int Ethernet1/1
   ip address 10.1.1.1 255.255.255.252
   no shut

***

ISp2-BPIB:
configure terminal
 hostname I2BPIb
 enable secret pass
 no ip domain-lookup
 logging console
 alias exec bp show ip int brief | ex una
 alias exec sr show ip route
 alias exec sp show ip protocols
 ip subnet-zero
 int  Eth 1/3
   ip address 10.1.1.5 255.255.255.252
   no shut

*********************************************

Step0: Enable Basic OSPF routing on Core:


R4-Pea
config t
 no router ospf 1
 router ospf 1
  network 172.16.0.0 0.0.255.255 area 0
  network 10.1.1.8 0.0.0.3 area 0

R3-PCore
config t
 no router ospf 1
 router ospf 1
  network 172.16.0.0 0.0.255.255 area 0
  network 10.1.1.8 0.0.0.3 area 0
  network 10.1.1.4 0.0.0.3 area 0

R2-PCoreb
config t
 no router ospf 1
 router ospf 1
  network 172.16.0.0 0.0.255.255 area 0
  network 10.1.1.0 0.0.0.3 area 0
  network 10.1.1.4 0.0.0.3 area 0

R1:Pez
config t
 no router ospf 1
 router ospf 1
  network 172.16.0.0 0.0.255.255 area 0
  network 10.1.1.0 0.0.0.3 area 0

STEP1: BASIC MPLS CONFIGURATION AT TELCO core:
        datacenter eng/core/wan/telco eng.
          highly paid syet!

R4:PEa
config t
 ip cef
 mpls ip
  int Ethernet1/2
    mpls ip
    mpls label protocol ldp
    !mpls mtu override 1512 
***
R3:P:
config t
 ip cef
 mpls ip
  int Ethernet1/1
  mpls ip
    mpls label protocol ldp
    !mpls mtu override 1512 
  int Ethernet1/2
  mpls ip
    mpls label protocol ldp
    !mpls mtu override 1512 
****
***
R2:P:
config t
 ip cef
 mpls ip
  int Ethernet1/1
    mpls ip
    mpls label protocol ldp
    !mpls mtu override 1512
  int Ethernet1/2
  mpls ip
    mpls label protocol ldp
    !mpls mtu override 1512
****
R1-1:PEz
config t
 ip cef
 mpls ip
  int Ethernet1/0
  mpls ip
    mpls label protocol ldp
    !mpls mtu override 1512

How to check:
R2P#show mpls ldp neighbor (lib)
    Peer LDP Ident: 172.16.1.1:0; Local LDP Ident 172.16.1.2:0
        TCP connection: 172.16.1.1.646 - 172.16.1.2.23066
        State: Oper; Msgs sent/rcvd: 8/8; Downstream
        Up time: 00:00:53
        LDP discovery sources:
          FastEthernet1/1, Src IP addr: 192.168.1.1
        Addresses bound to peer LDP Ident:
          192.168.1.1     172.16.1.1      
    Peer LDP Ident: 172.16.1.3:0; Local LDP Ident 172.16.1.2:0
        TCP connection: 172.16.1.3.41657 - 172.16.1.2.646
        State: Oper; Msgs sent/rcvd: 8/8; Downstream
        Up time: 00:00:40
        LDP discovery sources:
          FastEthernet1/2, Src IP addr: 192.168.1.6
        Addresses bound to peer LDP Ident:
          192.168.1.6     172.16.1.3      
R2P#

r2P#show mpls forwarding-table (fib)
Local  Outgoing    Prefix            Bytes tag  Outgoing   Next Hop    
tag    tag or VC   or Tunnel Id      switched   interface              
16     Pop tag     172.16.1.1/32     0          Fa1/1      192.168.1.1  
17     Pop tag     172.16.1.3/32     0          Fa1/2      192.168.1.6  
SW2P#

r2P#show mpls ldp bindings (lfib)
  tib entry: 172.16.1.1/32, rev 2
        local binding:  tag: 16
        remote binding: tsr: 172.16.1.1:0, tag: imp-null
        remote binding: tsr: 172.16.1.3:0, tag: 16
  tib entry: 172.16.1.2/32, rev 6
        local binding:  tag: imp-null
        remote binding: tsr: 172.16.1.1:0, tag: 17
        remote binding: tsr: 172.16.1.3:0, tag: 17
  tib entry: 172.16.1.3/32, rev 4
        local binding:  tag: 17
        remote binding: tsr: 172.16.1.1:0, tag: 16
        remote binding: tsr: 172.16.1.3:0, tag: imp-null
  tib entry: 192.168.1.0/30, rev 8
        local binding:  tag: imp-null
        remote binding: tsr: 172.16.1.1:0, tag: imp-null
        remote binding: tsr: 172.16.1.3:0, tag: 18

r2P#show ip route (routing table)
     172.16.0.0/32 is subnetted, 3 subnets
O       172.16.1.1 [110/2] via 192.168.1.1, 00:15:15, FastEthernet1/1
O       172.16.1.3 [110/2] via 192.168.1.6, 00:15:15, FastEthernet1/2
C       172.16.1.2 is directly connected, Loopback0
     192.168.1.0/30 is subnetted, 2 subnets
C       192.168.1.0 is directly connected, FastEthernet1/1
C       192.168.1.4 is directly connected, FastEthernet1/2

STEP2: VRF CONFIGURATION:
  virtual route forwarder: "Virtual/logical Router"
  allows you to have overlapping VPN networks

R4:PE_a
config t
 ip vrf clientBDOa
   rd 999:1
   route-target 64999:1
 ip vrf clientBPIa
   rd 999:2
   route-target 64999:2
 ip vrf clientPNBa
   rd 999:3
   route-target 64999:3 
   exit
***

R1:pez
config t
 ip vrf clientBDOb
   rd 999:1
   route-target 64999:1
 ip vrf clientBPIb
   rd 999:2
   route-target 64999:2
 ip vrf clientPNBb
   rd 999:3
   route-target 64999:3 
  exit
**********
R4-PEa#show ip vrf
  Name                             Default RD          Interfaces
  clientBDOa                       999:1               
  clientBPIa                       999:2               
  clientPNBa                       999:3               

R1-PEz#show ip vrf
  Name                             Default RD          Interfaces
  clientBDOb                       999:1               
  clientBPIb                       999:2               
  clientPNBb                       999:3               
SW3PEz#

STEP3: CONFIGURING VRF INTERFACES ON PE ROUTERS:

R4:PEa
config t
 int Ethernet1/1
   ip vrf forwarding clientBPIa
   ip address 10.1.1.2 255.255.255.252
   no shut
 int Ethernet1/0
   ip vrf forwarding clientPNBa
   ip address 10.1.1.2 255.255.255.252
   no shut
   no shut
end
***
R1:PEz: 
config t
 int Ethernet1/2
  ip vrf forwarding clientBPIb
  ip address 10.1.1.6 255.255.255.252
  no shut
 int Ethernet1/1
  ip vrf forwarding clientPNBb
  ip address 10.1.1.6 255.255.255.252
  no shut

R1-PEz#bp
Interface                  IP-Address      OK? Method Status                Protocol
Ethernet1/0                10.1.1.1        YES NVRAM  up                    up      
Ethernet1/1                10.1.1.6        YES manual up                    up      
Ethernet1/2                10.1.1.6        YES manual up                    up      
Ethernet1/3                209.9.9.1       YES NVRAM  up                    up      
Loopback0                  172.16.1.1      YES manual up                    up   

Make sure Real routers, can ping Virtual Routers!

STEP 4: MP-BGP configuration MultiProtocol BGP

BGP (handles 32bits:normal packet) 
vs mBGP(multi Protocol BGP = 96bits= 32 + 64bits RD)

R4:PEa
config t
 no router bgp 64999
 router bgp 64999
  !kill normal BGP, enable mBGP
  no bgp default ipv4-unicast
  neighbor 172.16.1.1 remote-as 64999
  neighbor 172.16.1.1 update-source lo0
  address-family vpnv4
  !standard BGP config, but wont run (-:
  neighbor 172.16.1.1 activate
  neighbor 172.16.1.1 send-community both
  exit-address-family
  !activate the neigbor and exchange vpnv4 routes(32+64)

R1:PEz peering with Lo of R2!
config t
 no router bgp 64999
 router bgp 64999
  no bgp default ipv4-unicast
  !disables IPv4 routing to handle VPN routes
  neighbor 172.16.1.4 remote-as 64999
  neighbor 172.16.1.4 update-source lo0
  !standard BGP config, but wont run (-:
  address-family vpnv4
   neighbor 172.16.1.4 activate
   neighbor 172.16.1.4 send-community both
  exit-address-family
  !activate the neigbor and exchange vpnv4 routes(32+64)





STEP5: INDIVIDUAL VIRTUAL/LOGICAL ROUTER VRF CONFIGURATION.


LOGICAL ROUTER OF PNB = clientPNBa/b
R4:PEa
config t
 router eigrp 90
  address-family ipv4 vrf clientPNBa
  autonomous-system 90
  network 10.0.0.0
  no auto-summary
  exit
***
R1:PeZ:
config t
  router eigrp 90
  address-family ipv4 vrf clientPNBb
  autonomous-system 90
  network 10.0.0.0
  no auto-summary
  exit
   exit
   
LOGICAL ROUTER OF BPI = clientBPIa/b
R4:PEa
config t
 router ospf 69 vrf clientBPIa
 network 0.0.0.0 0.0.0.0 area 0
 exit
***
R1-:PeZ
config t
 router ospf 69 vrf clientBPIb
  network 0.0.0.0 0.0.0.0 area 0
  exit
end

STEP6: ROUTE REDISTRIBUTIONS:

RIP - mBGP-RIP/EIGRP-mBGP -EIGRP/OSPF - mBGP -OSPF/


7.2:EIGRP-mBGP -EIGRP

R4:PEa
config t
 router bgp 64999
  address-family ipv4 vrf clientPNBa
  redistribute eigrp 90 metric 1
  exit
 router eigrp 90
  address-family ipv4 vrf clientPNBa
   autonomous-system 90
   network 10.0.0.0
   no auto-summary
   redistribute bgp 64999 metric 100000 10 1 255 1512
   !seed metric,sh int fa1/2      bw  de/10 load rely mtu
   exit-address-family
***
R1:PEz
config t
 router bgp 64999
  address-family ipv4 vrf clientPNBb
  redistribute eigrp 90 metric 1
  exit
 router eigrp 90
  address-family ipv4 vrf clientPNBb
   autonomous-system 90
   network 10.0.0.0
   no auto-summary
   redistribute bgp 64999 metric 100000 10 1 255 1512
   exit-address-family


OSPF - mBGP -OSPF
R4:PEa
config t
 router bgp 64999
  address-family ipv4 vrf clientBPIa
  no redistribute ospf 1
  redistribute ospf 69
  no auto-summary
  exit
 router ospf 69 vrf clientBPIa
  redistribute bgp 64999 metric-type 1 subnets
  network 0.0.0.0 0.0.0.0 area 0
exit
***
R1:PEz
config t
 router bgp 64999
  address-family ipv4 vrf clientBPIb
  no redistribute ospf 1
  redistribute ospf 69
  no auto-summary
  exit
 router ospf 69 vrf clientBPIb
  redistribute bgp 64999 metric-type 1 subnets
  network 0.0.0.0 0.0.0.0 area 0
exit

**** PASTE THE EIGRP CONFIGS AGAIN: maybe ************

STEP7.: 
IGNORE LATER NA TO!!!!!!!!!
IGP CONFIGURATION ON CLINETS: PE engineers talk with CE eng.
CE engineers will do this!

****
On all PNB(eigrp) routers:
config t
 router eigrp 90
  network 10.0.0.0
  no auto-summary
****
On all BPI(ospf) routers:
config t
 no router ospf 1
 router ospf 69
  network 0.0.0.0 0.0.0.0 area 0
********************************

@@@@@@ NEXUSSS  @@@@@@@@@@@

task11: why CCNP/Datacenter LOVE nexus: = turn Back Time!
show checkpoint summary 



ENCOR TASKzero: Locator/Identifier Separation Protocol:
LISP PROTOCOL: or ANTI-BGP, Anti-VPN.

@sa tatlong CSR:
config t
no logging console
no ip domain lookup
ip ssh version 1
int gi 1
 no shut
 ip address dhcp
 do sh ip int brief

@allRouters:
config t
cdp run
int gi 2
cdp enable
no shut
int gi 3
cdp enable
no shut
end
@R2:
conf t
router ospf 1
network 2.2.2.2 0.0.0.0 area 0
network 130.0.0.2 0.0.0.0 area 0
network 140.0.0.2 0.0.0.0 area 0
int lo 0
ip add 2.2.2.2 255.255.255.255
int gi 2
ip add 130.0.0.2 255.255.255.0
no shut
int gi 3
ip add 140.0.0.2 255.255.255.0
no shut
end

R1:
conf t
router ospf 1
network 130.0.0.1 0.0.0.0 area 0
int gi 2
ip add 130.0.0.1 255.255.255.0
no shut
int lo 0
 ip add 1.1.1.1 255.255.255.255
end
R3:
conf t
router ospf 1
network 140.0.0.3 0.0.0.0 area 0
int gi 3
ip add 140.0.0.3 255.255.255.0
no shut
int lo 0
 ip add 3.3.3.3 255.255.255.255
end

LISP CONFGIURATION: MAP SERVER/MAP RESOLVER.
R2: mapserver/mapresolver: can Ping everyone:


HOW TO PASSENCOR IN 3 WEEKS?
1. hands-on: RSThayup/NO copy PASTE!
2. CSR1000 + postman: Put,Patch,Delete.
3. JSON with Python.
"python syntax!"
4. The Lastest September Encor Exam Accurate.: 560Q
5. 80Q
6. https://sandboxdnac.cisco.com/dna/home
visit 2 minutes!

R1:
conf t
router ospf 1
network 130.0.0.1 0.0.0.0 area 0
int gi 2
ip add 130.0.0.1 255.255.255.0
no shut
int lo 0
 ip add 1.1.1.1 255.255.255.255
end
R3:
conf t
router ospf 1
network 140.0.0.3 0.0.0.0 area 0
int gi 3
ip add 140.0.0.3 255.255.255.0
no shut
int lo 0
 ip add 3.3.3.3 255.255.255.255
end


TASK5: Encor:
AAA: authentication,Authorization,Accouting.
RADIUS: remote Access Dial-in User Service
        KING: AD:active Directory.
TACACS: terminal access control access
compmgmt.msc

step1:
tools -> NaPs:
Raduis clients:
  New; takeHOme 10.1.1.1 8888888
New Network Policy
 Radius1stTry
   
step2: Tell Cisco to give MS all the Power:
config t
username backdoor password pass
AAA new-model
radius-server host 10.1.1.8 key 88888888
ip radius source-interface vlan 1
aaa authentication login default group radius local
Line vty 0 14
 login authentication default
end
sh radius statistics

TASK5: ENCOR Enterprise Wireless Deployment:
Cisco Autonomous=No Controller, Solo flight!
Cisco Wireless Lan Controller: 
Cisco Meraki: cloud controller (1,3,5yr)
Cisco Controller: 60k -> 24 APs.

TASK6: Wireless Network Engineer MATH:
LTO =
ntc = Rule: Max Effective Isotropic Radiated Power in PH:
      1000mw = 1W
      OUTDOOR = 2000mW, 2W

HOMELAB:
monday: Cucm + Ansible = automatic PHONEs and Wifi
tuesday:    Linux + Playbooks + .yml
Wednesday: VRF IP
Thurdays: youtube.

NEXUS = GALIT SA SCRIPTING!
ALLnexus:
config t
feature ospf
feature nv overlay
feature bgp
feature interface-vlan
feature vn-segment-vlan-based
system jumbomtu 9216
end





















########################################################


#Encor/Enarsi:

########################################################
Lab1 - Implement a GRE Tunnel:
########################################################

tASK1: basic Configs:
config t
hostname R1
ip route 0.0.0.0 0.0.0.0 200.0.0.2
int gi1
 no shut
 ip add 200.0.0.1 255.255.255.0
int gi2
 no shut
 ip add 10.20.0.1 255.255.255.0
 

config t
hostname R2
ip route 10.20.0.0 255.255.0.0 200.0.0.1
ip route 10.21.0.0 255.255.0.0 201.0.0.1
int gi1
 no shut
 ip add 200.0.0.2 255.255.255.0
int gi2
 no shut
 ip add 201.0.0.2 255.255.255.0
 
config t
hostname R3
ip route 0.0.0.0 0.0.0.0 201.0.0.2
int gi1
 no shut
 ip add 201.0.0.1 255.255.255.0
int gi2
 no shut
 ip add 10.21.0.1 255.255.255.0
 
task2: create a GRE tunnel:

r1:
config t
int tunnel 1
 ip add 172.20.21.1 255.255.255.0
 tunnel source gi 1
 tunnel destination 201.0.0.1
end

r3:
config t
int tunnel 1
 ip add 172.20.21.2 255.255.255.0
 tunnel source gi 1
 tunnel destination 200.0.0.1
end

R3#sh int tun 1          
Tunnel1 is up, line protocol is up 
  Hardware is Tunnel
  Internet address is 172.20.21.2/24
  MTU 9976 bytes, BW 100 Kbit/sec, DLY 50000 usec, 
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation TUNNEL, loopback not set
  Keepalive not set
  Tunnel linestate evaluation up
  Tunnel source 201.0.0.1 (GigabitEthernet1), destination 200.0.0.1
   Tunnel Subblocks:
      src-track:
         Tunnel1 source tracking subblock associated with GigabitEthernet1
          Set of tunnels with source GigabitEthernet1, 1 member 
  Tunnel protocol/transport GRE/IP

########################################################
Lab2: - Implement IPsec  Site-to-Site VPNs
########################################################

step1: Step 1: On R1 and R3, implement Internet Key Exchange (IKE) parameters.
you will enable IKE policies on R1 and R3. IKE Phase 1 defines the key exchange method used to
exchange and validate IKE policies between peers. In IKE Phase 2, the peers exchange and match 
IPsec policies for the authentication and encryption of data traffic:

R1#sh crypto isakmp policy 

Default IKE policy
Protection suite of priority 65503
        encryption algorithm:   AES - Advanced Encryption Standard (128 bit keys).
        hash algorithm:         Secure Hash Standard
        authentication method:  Rivest-Shamir-Adleman Signature
        Diffie-Hellman group:   #14 (2048 bit)
        lifetime:               86400 seconds, no volume limit
Protection suite of priority 65504
        encryption algorithm:   AES - Advanced Encryption Standard (128 bit keys).
        hash algorithm:         Secure Hash Standard
        authentication method:  Pre-Shared Key
        Diffie-Hellman group:   #14 (2048 bit)
        lifetime:               86400 seconds, no volume limit
Protection suite of priority 65505
        encryption algorithm:   AES - Advanced Encryption Standard (128 bit keys).
        hash algorithm:         Secure Hash Standard
        authentication method:  Rivest-Shamir-Adleman Signature
        Diffie-Hellman group:   #5 (1536 bit)
        lifetime:               86400 seconds, no volume limit
Protection suite of priority 65506
        encryption algorithm:   AES - Advanced Encryption Standard (128 bit keys).
        hash algorithm:         Secure Hash Standard
        authentication method:  Pre-Shared Key
        Diffie-Hellman group:   #5 (1536 bit)
		
These are default policies that are available if no custom ISAKMP policy is configured.
The policies are listed in order of priority with policy 65507 providing the most secure 
settings and policy 65514 offering the least secure.

R1:/R3
config t
crypto isakmp policy 10
 encryption aes 256
 hash sha256
 authentication pre-share
 group 14
 lifetime 3600
 exit
 
R3#sh crYpto ISakmp POlicy 

Global IKE policy
Protection suite of priority 10
        encryption algorithm:   AES - Advanced Encryption Standard (256 bit keys).
        hash algorithm:         Secure Hash Standard 2 (256 bit)
        authentication method:  Pre-Shared Key
        Diffie-Hellman group:   #14 (2048 bit)
        lifetime:               3600 seconds, no volume limit
		
step2: Step 2: On R1 and R3, configure the pre-shared keys.

Because pre-shared keys are used as the authentication method in the IKE policy,
a key must be configured on each router that points to the other VPN endpoint. 
These keys must match for authentication to be successful.

Use the crypto isakmp key key-string address ip-address global configuration mode
command to enter a pre-shared key. Use the global IP address of the remote peer,
which is the outside interface of the remote peer router.

r1:
CONFIG T
crypto isakmp key cisco123 address 201.0.0.1

r3:
CONFIG T
crypto isakmp key cisco123 address 200.0.0.1

Step3: Step 3: On R1 and R3, configure the IPsec transform set and lifetime.

R1/R3:

config t
!create a Security association with lifetime of 30mins/1800sec
crypto ipsec transform-set S2S-VPN esp-aes 256 esp-sha256-hmac
crypto ipsec security-association lifetime seconds 1800
exit

Step4: allow a traffic to use s2s vpn:

R1:
config t
ip access-list extended S2S-VPN-ACL
remark ACL identifies interesting traffic going to R3
permit ip 10.20.0.0 0.0.255.255 10.21.0.0 0.0.255.255
exit


R3:
config t
ip access-list extended S2S-VPN-ACL
remark ACL identifies interesting traffic going to R1
permit ip 10.21.0.0 0.0.255.255 10.20.0.0 0.0.255.255
exit

step5: Step 5: On R1 and R3, create and apply a crypto map.

A crypto map associates traffic that matches an access list to a peer
and various IKE and IPsec settings. After the crypto map is created,
it can be applied to one or more interfaces. The interfaces that it
is applied to should be the ones facing the IPsec peer:

R1:
config t
crypto map S2S-CMAP 10 ipsec-isakmp
 match address S2S-VPN-ACL
 set peer 201.0.0.1
 set pfs group14
 set transform S2S-VPN
 set security-association lifetime seconds 900
 exit
 int gi 1
   crypto map S2S-CMAP
 

R3:
config t
crypto map S2S-CMAP 10 ipsec-isakmp
 match address S2S-VPN-ACL
 set peer 200.0.0.1
 set pfs group14
 set transform S2S-VPN
 set security-association lifetime seconds 900
 exit
 int gi 1
   crypto map S2S-CMAP
   
Part 3: Verify a Site-to-Site VPN Between R1 and R3

R1# 

show crypto ipsec transform-set S2S-VPN

show crypto map

R3#sh crypto isakmp sa
IPv4 Crypto ISAKMP SA
dst             src             state          conn-id status
200.0.0.1       201.0.0.1       QM_IDLE           1001 ACTIVE

########################################################
Lab3 - Implement IPsec VTI Site-to-Site VPNs 
########################################################

step1:  Configure Static IPsec VTI on R1 and R3

R1:/R3
config t
crypto isakmp policy 10
 encryption aes 256
 hash sha256
 authentication pre-share
 group 14
 lifetime 3600
 exit
 
step2: Step 2: On R1 and R3, configure the transform set and tunnel mode.

R1/R3:
config t
 crypto ipsec transform-set VTI-VPN esp-aes 256 esp-sha256-hmac
   mode tunnel
   exit
   
step3: Step 3: On R1 and R3, configure VTI over IPsec using IPsec profiles.

R1:/R3
config t
crypto ipsec profile VTI-PROFILE
 set transform-set VTI-VPN
 exit

step4: On R1, configure the tunnel interface.

R1:
config t
no int tunnel 1
int tunnel 1
 bandwidth 4000
 ip add 172.20.21.1 255.255.255.0
 ip mtu 1400
 tunnel source 200.0.0.1
 tunnel destination 201.0.0.1
 tunnel mode ipsec ipv4
 !note defaults to GRE kasi
 tunnel protection ipsec profile VTI-PROFILE
 

R3:
config t
no int tunnel 1
int tunnel 1
 bandwidth 4000
 ip add 172.20.21.2 255.255.255.0
 ip mtu 1400
 tunnel source 201.0.0.1
 tunnel destination 200.0.0.1
 tunnel mode ipsec ipv4
 !note defaults to GRE kasi
 tunnel protection ipsec profile VTI-PROFILE
   
VEFIRY VPNS:

R1#show crypto session 
Crypto session current status

Interface: Tunnel1
Session status: UP-ACTIVE       <<-- eto
Peer: 201.0.0.1 port 500        <<-- eto
  Session ID: 0  
  IKEv1 SA: local 200.0.0.1/500 remote 201.0.0.1/500 Active 
  IPSEC FLOW: permit ip 0.0.0.0/0.0.0.0 0.0.0.0/0.0.0.0 
        Active SAs: 2, origin: crypto map

R1#show crypto session 
Crypto session current status

Interface: Tunnel1    <<-- eto
Session status: UP-ACTIVE       <<-- eto
Peer: 201.0.0.1 port 500       <<-- eto
  Session ID: 0  
  IKEv1 SA: local 200.0.0.1/500 remote 201.0.0.1/500 Active 
  IPSEC FLOW: permit ip 0.0.0.0/0.0.0.0 0.0.0.0/0.0.0.0 
        Active SAs: 2, origin: crypto map
		

########################################################
Lab4 - Implement IPsec VTI Site-to-Site VPNs 
########################################################

Part 2: Configure and Verify Flexible Netflow

As previously stated, Flexible Netflow provides the ability to customize traffic analysis parameters. The workflow for Flexible Netflow consists of four steps:
Step 1.	Create Flow Records. Flow records define the information to be collected. There are predefined flow records that match the flow caching done by Classic Netflow, or you can configure your own custom flow record to suit your needs.
Step 2.	Create Flow Exporter. This defines where compiled statistic information is sent.
Step 3.	Create Flow Monitor and associate Flow Records and Flow Exporters with it. 
Step 4.	Configure the appropriate interface for input or output caching associated with the appropriate Flow Monitor.

a.	For our first flow record, we will use the predefined ipv4 original-input flow record. Because it is predefined, there is no configuration necessary.
b.	For our second flow record, we will create a custom flow record. Because the first flow record is focused on input traffic, the second will focus on output traffic. Create a flow record named CCNP8-CUSTOM-OUT.

R1:
config t
flow record CCNP8-CUSTOM-OUT
 description Custom Flow Record for outbound traffic
 match ipv4 destination address
 match transport destination-port
 collect counter bytes
 collect counter packets
end
R1#show flow record CCNP8-CUSTOM-OUT
flow record CCNP8-CUSTOM-OUT:
  Description:        Custom Flow Record for outbound traffic
  No. of users:       0
  Total field space:  14 bytes
  Fields:
    match ipv4 destination address
    match transport destination-port

Step 2: Create a flow exporter.
a.	The flow exporter configuration defines where the cached information 
will be sent. Create a flow exporter named CCNP8-COLLECTOR-HOST.
Further specify that the exporter should use Netflow version 9,
and point to 192.168.1.50 udp port 9999.

R1:
config t
flow exporter CCNP8-COLLECTOR-HOST
  destination 192.168.1.50
  export-protocol netflow-v9
  transport UDP 9999
  exit
  
R1#show flow exporter CCNP8-COLLECTOR-HOST
Flow Exporter CCNP8-COLLECTOR-HOST:
  Description:              User defined
  Export protocol:          NetFlow Version 9
  Transport Configuration:
    Destination type:       IP
    Destination IP address: 192.168.1.50
    Source IP address:      200.0.0.1
    Transport Protocol:     UDP
    Destination Port:       9999
    Source Port:            51571
    DSCP:                   0x0
    TTL:                    255
	
Step 3: Create flow monitors:
a.	Create the first flow monitor and name it CCNP8-INBOUND-MONITOR
using the flow monitor CCNP8-INBOUND-MONITOR command. As part of the 
flow monitor, specify that it will record the
netflow ipv4 original-input flow record,
export the cache to the exporter every 30 
seconds, and identify CCNP8-COLLECTOR-HOST as the exporter.

R1:
config t
flow monitor CCNP8-INBOUND-MONITOR
 record netflow ipv4 original-input
 exporter CCNP8-COLLECTOR-HOST
 exit
 
b.	Create the second flow monitor and name it CCNP8-OUTBOUND-MONITOR
using the flow monitor CCNP8-OUTBOUND-MONITOR command. As part of the 
flow monitor, specify that it will record the CCNP8-CUSTOM-OUT flow record,
export the cache to the exporter every 30 seconds, 
and identify CCNP8-COLLECTOR-HOST as the exporter:

config t
flow monitor CCNP8-OUTBOUND-MONITOR
 record CCNP8-CUSTOM-OUT
 cache timeout active 30
 exporter CCNP8-COLLECTOR-HOST
 exit
 
R1#show flow monitor 
Flow Monitor CCNP8-INBOUND-MONITOR:
  Description:       User defined
  Flow Record:       netflow ipv4 original-input
  Flow Exporter:     CCNP8-COLLECTOR-HOST
  Cache:
    Type:                 normal (Platform cache)
    Status:               not allocated
    Size:                 200000 entries
    Inactive Timeout:     15 secs
    Active Timeout:       1800 secs

    Trans end aging:   off

Flow Monitor CCNP8-OUTBOUND-MONITOR:
  Description:       User defined
  Flow Record:       CCNP8-CUSTOM-OUT
  Flow Exporter:     CCNP8-COLLECTOR-HOST
  Cache:
    Type:                 normal (Platform cache)
    Status:               not allocated
    Size:                 200000 entries
 --More-- 
 
Step 4: Configure the interface for flow caching:
The last step is to configure the appropriate interface(s)
so that they will cache information. In our lab, we will 
focus on the input and output from interface g0/0/0 on R1. 
Use the ip flow monitor <name> <direction> command on g0/0/1 
to specify the inbound and outbound flow monitors you have created:

R1:
config t
int gi 1
 ip flow monitor CCNP8-INBOUND-MONITOR input
 ip flow monitor CCNP8-OUTBOUND-MONITOR output
 exit
 
Step 5: Create some traffic:To gather statistics, we will need some traffic.

a.	From PC2, start a continuous ping to R1 using IPv4 and IPv6.
As a part of each set of ping parameters, 
set the size of the packets to 1475 bytes.

The windows commands are as follows: 
C:\> ping 10.0.0.1 -t -l 1475

D1# ping
Protocol [ip]:
Target IP address: 10.0.0.1
Repeat count [5]: 100000
Datagram size [100]:
Timeout in seconds [2]:
Extended commands [n]: y
Ingress ping [n]:
Source address or interface:
DSCP Value [0]:
Type of service [0]:
Set DF bit in IP header? [no]:
Validate reply data? [no]:
Data pattern [0x0000ABCD]:
Loose, Strict, Record, Timestamp, Verbose[none]:
Sweep range of sizes [n]: y
Sweep min size [36]:
Sweep max size [18024]:
Sweep interval [1]:
Type escape sequence to abort.
Sending 89945, [36..18024]-byte ICMP Echos to 10.1.1.1, timeout is 2 seconds:
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

